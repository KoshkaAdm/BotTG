from aiogram import Router, types
from aiogram.filters import Command
from openai_client import generate_text
from database import get_usage, increment_usage

router = Router()
FREE_LIMIT = 10

@router.message(Command("start"))
async def start_cmd(msg: types.Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ¬´–¢–æ —á—Ç–æ –Ω–∞–¥–æ¬ª üëã\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç—ã, —Ç–∞–±–ª–∏—Ü—ã –∏ –ª–æ–≥–æ. –ù–∞–ø–∏—à–∏ —Ç–µ–º—É, –∏ —è —Å–æ–∑–¥–∞–º —Ç–µ–∫—Å—Ç!")

@router.message()
async def handle_prompt(msg: types.Message):
    user_id = msg.from_user.id
    usage = get_usage(user_id)

    if usage >= FREE_LIMIT:
        await msg.answer("‚ö†Ô∏è –¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return

    await msg.answer("‚úç –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")
    reply = await generate_text(msg.text)
    await msg.answer(reply)
    increment_usage(user_id)


@router.message(Command("logo"))
async def logo_cmd(msg: types.Message):
    await msg.answer("üñå –ù–∞–ø–∏—à–∏, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –ª–æ–≥–æ—Ç–∏–ø–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ª–æ–≥–æ—Ç–∏–ø –∫–æ—Ñ–µ–π–Ω–∏ —Å —á–∞—à–∫–æ–π –∏ –ø–∞—Ä–æ–º¬ª)")

@router.message(lambda m: m.text.lower().startswith("–ª–æ–≥–æ—Ç–∏–ø "))
async def handle_logo(msg: types.Message):
    from logo_generator import generate_logo
    user_id = msg.from_user.id
    usage = get_usage(user_id)

    if usage >= FREE_LIMIT:
        await msg.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É.")
        return

    prompt = msg.text[8:].strip()
    await msg.answer("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ª–æ–≥–æ—Ç–∏–ø...")
    url = await generate_logo(prompt)
    if url.startswith("http"):
        await msg.answer_photo(url, caption="–í–æ—Ç –ª–æ–≥–æ—Ç–∏–ø!")
    else:
        await msg.answer(url)
    increment_usage(user_id)


from sheets_client import create_user_sheet, append_expense, append_task

@router.message(Command("create_table"))
async def create_table(msg: types.Message):
    url = create_user_sheet(msg.from_user.id)
    await msg.answer(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {url}")

@router.message(Command("sheet_link"))
async def get_sheet_link(msg: types.Message):
    try:
        url = f"https://docs.google.com/spreadsheets/d/UserSheet_{msg.from_user.id}"
        await msg.answer(f"üìé –í–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞: {url}")
    except:
        await msg.answer("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /create_table")

@router.message(Command("add_expense"))
async def add_expense_cmd(msg: types.Message):
    try:
        parts = msg.text.split(maxsplit=2)
        amount = parts[1]
        category = parts[2]
        append_expense(msg.from_user.id, amount, category)
        await msg.answer("üí∏ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É.")
    except:
        await msg.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /add_expense 500 –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥")

@router.message(Command("add_task"))
async def add_task_cmd(msg: types.Message):
    try:
        task = msg.text.split(maxsplit=1)[1]
        append_task(msg.from_user.id, task)
        await msg.answer("üìå –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.")
    except:
        await msg.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /add_task –°–¥–µ–ª–∞—Ç—å –ª–µ–Ω–¥–∏–Ω–≥")

from aiogram import types
from aiogram.filters import Command
from payments import price, PROVIDER_TOKEN, get_subscription_expiry
from database import activate_subscription, is_subscribed

@router.message(Command("buy"))
async def buy_cmd(msg: types.Message):
    await msg.answer_invoice(
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
        description="–°–Ω—è—Ç–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π",
        provider_token=PROVIDER_TOKEN,
        currency="RUB",
        prices=price,
        start_parameter="subscribe-bot",
        payload="subscription"
    )

@router.pre_checkout_query()
async def checkout(pre_checkout_q: types.PreCheckoutQuery, bot):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

@router.message(lambda msg: msg.successful_payment is not None)
async def successful_payment(msg: types.Message):
    expiry = get_subscription_expiry()
    activate_subscription(msg.from_user.id, expiry)
    await msg.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {expiry}! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É üíô")

@router.message(Command("check"))
async def check_subscription(msg: types.Message):
    if is_subscribed(msg.from_user.id):
        await msg.answer("‚úÖ –£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!")
    else:
        await msg.answer("üö´ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.")
